#include <stdio.h>
#include <stdlib.h>

// Function declarations
void display(int arr[], int n);
void insertByPosition(int arr[], int *n);
void deleteByPosition(int arr[], int *n);
void insertByKey(int arr[], int *n);
void deleteByKey(int arr[], int *n);
void insertByOrder(int arr[], int *n);
void searchByKey(int arr[], int n);
void searchByPosition(int arr[], int n);
void reverseArray(int arr[], int n);

int main() {
    int *arr, n, choice;

    printf("Enter number of elements: ");
    scanf("%d", &n);

    // Allocate memory dynamically
    arr = (int*) malloc(n * sizeof(int));

    printf("Enter %d elements:\n", n);
    for(int i = 0; i < n; i++)
        scanf("%d", &arr[i]);

    // Menu driven loop
    do {
        printf("\n===== MENU =====\n");
        printf("1. Insert by Position\n");
        printf("2. Delete by Position\n");
        printf("3. Insert by Key\n");
        printf("4. Delete by Key\n");
        printf("5. Insert by Order (Sorted)\n");
        printf("6. Search by Key\n");
        printf("7. Search by Position\n");
        printf("8. Reverse Array\n");
        printf("9. Display\n");
        printf("0. Exit\n");
        printf("================\n");
        printf("Enter choice: ");
        scanf("%d", &choice);

        switch(choice) {
            case 1: insertByPosition(arr, &n); break;
            case 2: deleteByPosition(arr, &n); break;
            case 3: insertByKey(arr, &n); break;
            case 4: deleteByKey(arr, &n); break;
            case 5: insertByOrder(arr, &n); break;
            case 6: searchByKey(arr, n); break;
            case 7: searchByPosition(arr, n); break;
            case 8: reverseArray(arr, n); break;
            case 9: display(arr, n); break;
            case 0: printf("Exiting...\n"); break;
            default: printf("Invalid choice!\n");
        }
    } while(choice != 0);

    free(arr);
    return 0;
}

// ✅ Function Definitions

// 1️⃣ Display array
void display(int arr[], int n) {
    printf("Array elements: ");
    for(int i = 0; i < n; i++)
        printf("%d ", arr[i]);
    printf("\n");
}

// 2️⃣ Insert element by position
void insertByPosition(int arr[], int *n) {
    int pos, val;
    printf("Enter position (1 to %d): ", *n + 1);
    scanf("%d", &pos);
    printf("Enter value: ");
    scanf("%d", &val);

    if(pos < 1 || pos > *n + 1) {
        printf("Invalid position!\n");
        return;
    }

    for(int i = *n; i >= pos; i--)
        arr[i] = arr[i - 1];

    arr[pos - 1] = val;
    (*n)++;

    printf("Inserted %d at position %d.\n", val, pos);
}

// 3️⃣ Delete element by position
void deleteByPosition(int arr[], int *n) {
    int pos;
    printf("Enter position (1 to %d): ", *n);
    scanf("%d", &pos);

    if(pos < 1 || pos > *n) {
        printf("Invalid position!\n");
        return;
    }

    for(int i = pos - 1; i < *n - 1; i++)
        arr[i] = arr[i + 1];

    (*n)--;
    printf("Deleted element at position %d.\n", pos);
}

// 4️⃣ Insert element after a key
void insertByKey(int arr[], int *n) {
    int key, val, found = 0;
    printf("Enter key: ");
    scanf("%d", &key);
    printf("Enter value to insert: ");
    scanf("%d", &val);

    for(int i = 0; i < *n; i++) {
        if(arr[i] == key) {
            for(int j = *n; j > i + 1; j--)
                arr[j] = arr[j - 1];
            arr[i + 1] = val;
            (*n)++;
            printf("Inserted %d after key %d.\n", val, key);
            found = 1;
            break;
        }
    }

    if(!found)
        printf("Key not found!\n");
}

// 5️⃣ Delete element by key
void deleteByKey(int arr[], int *n) {
    int key, found = 0;
    printf("Enter key to delete: ");
    scanf("%d", &key);

    for(int i = 0; i < *n; i++) {
        if(arr[i] == key) {
            for(int j = i; j < *n - 1; j++)
                arr[j] = arr[j + 1];
            (*n)--;
            printf("Deleted key %d.\n", key);
            found = 1;
            break;
        }
    }

    if(!found)
        printf("Key not found!\n");
}

// 6️⃣ Insert in sorted order
void insertByOrder(int arr[], int *n) {
    int val, i;
    printf("Enter value to insert (sorted): ");
    scanf("%d", &val);

    for(i = *n - 1; i >= 0 && arr[i] > val; i--)
        arr[i + 1] = arr[i];

    arr[i + 1] = val;
    (*n)++;
    printf("Inserted %d in sorted order.\n", val);
}

// 7️⃣ Search by key
void searchByKey(int arr[], int n) {
    int key, found = 0;
    printf("Enter key to search: ");
    scanf("%d", &key);

    for(int i = 0; i < n; i++) {
        if(arr[i] == key) {
            printf("Key %d found at position %d.\n", key, i + 1);
            found = 1;
            break;
        }
    }

    if(!found)
        printf("Key not found!\n");
}

// 8️⃣ Search by position
void searchByPosition(int arr[], int n) {
    int pos;
    printf("Enter position (1 to %d): ", n);
    scanf("%d", &pos);

    if(pos < 1 || pos > n)
        printf("Invalid position!\n");
    else
        printf("Element at position %d is %d.\n", pos, arr[pos - 1]);
}

// 9️⃣ Reverse the array
void reverseArray(int arr[], int n) {
    int temp;
    for(int i = 0; i < n / 2; i++) {
        temp = arr[i];
        arr[i] = arr[n - i - 1];
        arr[n - i - 1] = temp;
    }
    printf("Array reversed successfully!\n");
}
